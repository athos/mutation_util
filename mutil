#! /usr/bin/env python

from mutil.run import *
import argparse

#
# top level parser
#
parser = argparse.ArgumentParser(prog = "mutil")
parser.add_argument("--version", action = "version", version = "MutationUtil-0.4.0")
subparsers = parser.add_subparsers()

####################
# compare
parse_parser = subparsers.add_parser("comparison")
parse_parser.add_argument( '-i', '--input', help = 'mutation list', type = str, default = None, required = True )
parse_parser.add_argument( '-d', '--database', help = 'fairhose maf', type = str, default = None, required = True )
parse_parser.add_argument( '-o', '--output', help = 'output directory', type = str, default = None, required = True)
parse_parser.add_argument( '-m', '--mapchain', help = 'map chain file', type = str, default = None)
parse_parser.add_argument( '-e', '--eb_pval', help = 'EBCall P-value', type = float, default = 4.0)
parse_parser.add_argument( '-f', '--fish_pval', help = 'Fisher test P-value', type = float, default = 1.0)
parse_parser.add_argument( '-r', '--realign_pval', help = 'Realignment Fisher test P-value', type = float, default = 1.0)
parse_parser.add_argument( '-t', '--tcount', help = 'read count of tumor', type = int, default = 4)
parse_parser.add_argument( '-n', '--ncount', help = 'read count of normal', type = int, default = 2)
parse_parser.add_argument( '-p', '--post10q', help = '10% posterior quantile', type = float, default = 1.0)
parse_parser.add_argument( '-q', '--r_post10q', help = 'Realignment 10% posterior quantile', type = float, default = 1.0)
parse_parser.add_argument( '-c', '--count', help = 'read count', type = int, default = 4)
parse_parser.add_argument( '-g', '--gene_ref', help = 'target', type = str, default = "")
parse_parser.add_argument( '-1', '--print_graph', help = 'print graph', type = bool, default = True)
parse_parser.add_argument( '-2', '--pancan', help = 'use pancan', type = str, default = "")
parse_parser.add_argument( '-3', '--hotspot', help = 'use hotspot', type = str, default = "")

parse_parser.set_defaults(func = run_compare)

####################
# filter
parse_parser = subparsers.add_parser("filter")
parse_parser.add_argument( '-i', '--input', help = 'mutation list', type = str, default = None, required = True )
parse_parser.add_argument( '-o', '--output', help = 'output directory', type = str, default = None, required = True)
parse_parser.add_argument( '-e', '--eb_pval', help = 'EBCall P-value', type = float, default = 0.0)
parse_parser.add_argument( '-f', '--fish_pval', help = 'Fisher test P-value', type = float, default = 0.0)
parse_parser.add_argument( '-r', '--realign_pval', help = 'Realignment Fisher test P-value', type = float, default = 0.0)
parse_parser.add_argument( '-t', '--tcount', help = 'read count of tumor', type = int, default = -1)
parse_parser.add_argument( '-n', '--ncount', help = 'read count of normal', type = int, default = 1000000)
parse_parser.add_argument( '-p', '--post10q', help = '10% posterior quantile', type = float, default = 0.0)
parse_parser.add_argument( '-q', '--r_post10q', help = 'Realignment 10% posterior quantile', type = float, default = 0.0)
parse_parser.add_argument( '-c', '--count', help = 'read count', type = int, default = -1)

parse_parser.set_defaults(func = run_filter)

####################
# compare 
parse_parser = subparsers.add_parser("all")
parse_parser.add_argument( '-i', '--input', help = 'mutation list', type = str, default = None, required = True )
parse_parser.add_argument( '-d', '--database', help = 'fairhose maf', type = str, default = None, required = True )
parse_parser.add_argument( '-o', '--output', help = 'output directory', type = str, default = None, required = True)
parse_parser.add_argument( '-m', '--mapchain', help = 'map chain file', type = str, default = None)
parse_parser.add_argument( '-e', '--eb_pval', help = 'EBCall P-value', type = float, default = 4.0)
parse_parser.add_argument( '-f', '--fish_pval', help = 'Fisher test P-value', type = float, default = 1.0)
parse_parser.add_argument( '-r', '--realign_pval', help = 'Realignment Fisher test P-value', type = float, default = 1.0)
parse_parser.add_argument( '-t', '--tcount', help = 'read count of tumor', type = int, default = 4)
parse_parser.add_argument( '-n', '--ncount', help = 'read count of normal', type = int, default = 2)
parse_parser.add_argument( '-p', '--post10q', help = '10% posterior quantile', type = float, default = 1.0)
parse_parser.add_argument( '-q', '--r_post10q', help = 'Realignment 10% posterior quantile', type = float, default = 1.0)
parse_parser.add_argument( '-c', '--count', help = 'read count', type = int, default = 4)
parse_parser.add_argument( '-g', '--gene_ref', help = 'select gene name', type = str, default = "")
parse_parser.add_argument( '-2', '--pancan', help = 'use pancan', type = str, default = "")
parse_parser.add_argument( '-3', '--hotspot', help = 'use hotspot', type = str, default = "")

parse_parser.set_defaults(func = run_all)

####################
# coount
parse_parser = subparsers.add_parser("count")
parse_parser.add_argument( '-i', '--inbam', help = 'bam file', type = str, default = None, required = True )
parse_parser.add_argument( '-f', '--ref_fa', help = 'Reference genome in fasta format', type = str, default = None , required = True)
parse_parser.add_argument( '-s', '--samtools_path', type = str, default = None, required = True)
parse_parser.add_argument( '-r', '--region', help = 'region in which pileup is generated', type = str, default = None, required = True )

parse_parser.set_defaults(func = run_count)

####################
# coount
parse_parser = subparsers.add_parser("hotspot")
parse_parser.add_argument( '-i', '--in_hotspot_mutation', type = str, default = None, required = True )
parse_parser.add_argument( '-g', '--in_genomon_mutation', type = str, default = None, required = True )
parse_parser.add_argument( '-o', '--output', type = str, default = None, required = True)
parse_parser.add_argument('--noheader', default = True, action = 'store_false')

parse_parser.set_defaults(func = run_hotspot)

####################
# coount
parse_parser = subparsers.add_parser("annotate")
parse_parser.add_argument( '-i', '--in_mutation', type = str, default = None, required = True )
parse_parser.add_argument( '-a', '--annovar_path', type = str, default = None, required = True )
parse_parser.add_argument('--noheader', default = True, action = 'store_false')

parse_parser.set_defaults(func = run_annotate)

####################
# blacklist
parse_parser = subparsers.add_parser("blacklist")
parse_parser.add_argument( '-i', '--in_mutation', type = str, default = None, required = True )
parse_parser.add_argument( '-b', '--blacklist', type = str, default = None, required = True )
parse_parser.add_argument( '-o', '--output', type = str, default = None, required = True)
parse_parser.add_argument( '-m', '--min_candidate', help = 'min_candidate', type = int, default = 2)
parse_parser.set_defaults(func = run_blacklist)

args = parser.parse_args()
args.func(args)

